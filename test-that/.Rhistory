#Sales Histogram
summary(data$Sales)
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.png")
hist(data$Sales)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.pdf")
hist(data$Sales)
dev.off()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
print("Summary Statistics For TV Advertising")
summary(data$TV)
print("Summary Statistics for Sales ")
summary(data$Sales)
sink()
save(c(reg_obj, summary(reg_obj)), file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
reg_obj=lm(TV~Sales, data=data)
summary(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV")
abline(reg_obj)
dev.off()
save(reg_obj, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
save(reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
reg_summary=summary(reg_obj)
save(reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
load("/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
```{r cars}
load("/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
reg_summary
reg_obj
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
reg_obj=lm(TV~Sales, data=data)
reg_summary=latex(summary(reg_obj))
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
```{r cars, echo=FALSE}
load("/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
```
![Relationship Between TV Advertisements and Sales](/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png)
Summary Table for Relevant Regression Statistics
```{r pressure, echo=FALSE}
print(reg_summary)
reg_summary
install.packages("Hmisc")
library(HMisc)
library(Hmisc)
reg_summary=latex(summary(reg_obj))
warnings()
reg_summary
reg_summary
reg_summary=summary(reg_obj)
reg_summary
data.frame(reg_summary)
install.packages("stargazer")
library(stargazer)
reg_summary=stargazer(reg_obj)
library(stargazer)
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
reg_obj=lm(TV~Sales, data=data)
reg_summary=stargazer(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
```{r cars, echo=FALSE}
load("/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
```
![Relationship Between TV Advertisements and Sales](/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png)
Summary Table for Relevant Regression Statistics
```{r pressure, echo=FALSE}
print(reg_summary)
```
?stargazer
reg_summary=stargazer(reg_obj, probit.model, title= "Regression Results", align= TRUE)
stargazer(reg_obj, title= "Regression Results", align= TRUE)
install.packages("dcolumn")
library(dcolumn)
library(stargazer)
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
reg_obj=lm(TV~Sales, data=data)
reg_summary=summary(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
#TV Histogram
tv_summary=summary(data$TV)
cat("TV Summary Statistics\n\n", file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.png")
hist(data$TV)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.pdf")
hist(data$TV)
dev.off()
#Sales Histogram
summary(data$Sales)
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.png")
hist(data$Sales)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.pdf")
hist(data$Sales)
dev.off()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
```{r cars, echo=FALSE}
load("/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
```
![Relationship Between TV Advertisements and Sales](/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png)
Summary Table for Relevant Regression Statistics
```{r pressure, echo=FALSE}
print(reg_summary)
simulate_one=function(initial_bet, multiplier){
outcomes = c(rep(-1, 55), rep(1, 45))
outcome = sample(outcomes, size = 1)
if(outcome==1){
gain=initial_bet*multiplier
return(gain)
}
loss=initial_bet*multiplier*-1
return(loss)
}
simulate_turns = function(initial_bet, strategy, numBets) {
outcomes = c(rep(-1, 55), rep(1, 45))
multiplier=1
result=vector()
for(i in 1:numBets) {
result[i]=simulate_one(initial_bet, multiplier)
if(result[i]<0){
multiplier=strategy*multiplier
}
else{
multiplier=1
}
}
return((result))
}
#Extracting maximum amount of money you have to be willing to bet
catastrophic_loss=function(initial_bet, strategy, numBets, times){
dist=vector()
for(i in 1:times){
dist[i]=max(simulate_turns(1,2,100))
}
plot(dist)
}
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(1, 2, 10, 100)
catastrophic_loss(1, 2, 10, 100)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
#TV Histogram
tv_summary=summary(data$TV)
cat("TV Summary Statistics\n\n", file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.png")
hist(data$TV)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.pdf")
hist(data$TV)
dev.off()
#Sales Histogram
summary(data$Sales)
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.png")
hist(data$Sales)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.pdf")
hist(data$Sales)
dev.off()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
library(stargazer)
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
reg_obj=lm(TV~Sales, data=data)
reg_summary=summary(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/",args, sep="")
cat("3", "2")
cat("3", "2", sep="")
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data",lasjdfl;sj, sep=""))
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data","jlasdjf", sep=""))
reg_obj=lm(TV~Sales, data=data)
reg_summary=summary(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
#TV Histogram
tv_summary=summary(data$TV)
cat("TV Summary Statistics\n\n", file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.png")
hist(data$TV)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.pdf")
hist(data$TV)
dev.off()
#Sales Histogram
summary(data$Sales)
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.png")
hist(data$Sales)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.pdf")
hist(data$Sales)
dev.off()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", c("Advertising.csv"), sep="")
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
z=cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
read.csv(z)
read.csv(c("z"))
read.csv("z")
read.csv(z)
read.csv(z)
z
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(file=cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(as.char(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/"), "Advertising.csv", sep=""))
read.csv(as.character(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/"), "Advertising.csv", sep=""))
read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
)
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
str(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
str(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[1]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[[1]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[[1]]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv"))
c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv")
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv")
pasate("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")[1]
read.csv(paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
cars
cars=cars
View(cars)
View(mtcars)
mtcars=mtcars
full=lm(mpg~., data=mtcars)
reduced=lm(mpg~.-hp, data=mtcars)
summary(full)
anova(full, reduce)
anova(full, reduced)
summary(full)
anova(reduced, full)
x=c(1,2,3,4,5)
y=c(1,2,3,4,NA)
z=c(TRUE, FALSE, TRUE)
w=letters[1:5]
class(z)
range_value(y)
source("../functions/functions.R")
# load the source code of the functions to be tested
source("../functions/missing-values.R")
source("../functions/range-value.R")
source("../functions/missing-values.R")
source("../functions/range-value.R")
range_value(z)
range_value <- function(x) {
max(x) - min(x)
}
range_value(z)
range_value(z)
w
range_value(w)
test_that("range works as expected for vector w" {
expect_error(range_value(w),"Error in max(x) - min(x) : non-numeric argument to binary operator")
})
getwd
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159")
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/Stat159Labs/test-that")
library(testthat)
test_file("tests/tests.R")
install.packages("testthat")
library(testthat)
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
range_value(y)
test_file("tests/tests.R")
range_value(y)
class(missing_values())
class(missing_values(x))
test_file("tests/tests.R")
test_file("tests/tests.R")
na.rm(y)
rm.NA(y)
rm.na(y)
na.omit(y)
range_value(y)
range_value(y, na.rm=FALSE)
range_value(y, na.rm=TRUE)
l=y
l
l=na.omit(l)
l
l[1]
l[[1]]
l+1
as.vector(l)
range_value <- function(x, na.rm=TRUE) {
if(na.rm=TRUE){
x=as.vector(na.omit(x))
max(x) - min(x)
}
max(x) - min(x)
}
range_value <- function(x, na.rm=TRUE) {
if(na.rm=TRUE){
x=as.vector(na.omit(x))
max(x) - min(x)
}
max(x) - min(x)
}
range_value <- function(x, na.rm=TRUE){
if(na.rm=TRUE){
x=as.vector(na.omit(x))
max(x) - min(x)
}
else{
max(x) - min(x)
}
}
range_value <- function(x, na.rm=TRUE){
if(na.rm=TRUE){
x=as.vector(na.omit(x))
max(x) - min(x)
}
else{
max(x) - min(x)
}
}
range_value <- function(x, na.rm=TRUE){
if(na.rm=TRUE){
x=as.vector(na.omit(x))
return(max(x) - min(x))
}
else{
return(max(x) - min(x))
}
}
range_value <- function(x, na.rm=TRUE){
if(na.rm==TRUE){
x=as.vector(na.omit(x))
max(x) - min(x)
}
else{
max(x) - min(x)
}
}
range_value(x)
range_value(y)
x=c(1,2,3,4,5)
y=c(1,2,3,4,NA)
z=c(TRUE, FALSE, TRUE)
w=letters[1:5]
# load the source code of the functions to be tested
source("../functions/missing-values.R")
source("../functions/range-value.R")
# context with one test that groups expectations
context("Test for range value")
test_that("range works as expected for vector y", {
y=c(1,2,3,4,NA)
expect_length(range_value(y), 1)
expect_equal(range_value(y), 3)
})
test_that("range works as expected for vector z", {
z=c(TRUE, FALSE, TRUE)
expect_equal(range_value(z), 1L)
expect_length(range_value(z), 1)
expect_type(range_value(z), 'integer')
})
test_that("range works as expected for vector w", {
w=letters[1:5]
expect_error(range_value(w),"non-numeric argument to binary operator")
})
# context with one test that groups expectations
context("Test for missing values")
test_that("range works as expected for vector w", {
expect_length(missing_values(x), 1)
expect_type(missing_values(x), "double")
expect_gte(missing_values(x), 0)
})
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
test_file("tests/tests.R")
